@page "/excform"

@using VaaradhiPay.Components.Pages.L1
@using VaaradhiPay.Components.Pages.L1.ErrorTemplates
@using VaaradhiPay.DTOs
@using VaaradhiPay.Data
@using VaaradhiPay.Services.Interfaces

@inject ILoggedInUserService LoggedInUserService
@inject ICoinTypeService CoinTypeService
@inject ToastService Toast
@inject PreloadService Load

@inherits ComponentBase

<div class="exchangeform-container">
    <div class="input-container">
        <div class="input-wrapper">
            <p class="input-label-text">You Pay</p>
            <input class="main-input-field" type="number" @bind="youPayValue" @bind:event="oninput" @onkeyup="CalculateReceivedValue" />
        </div>
        <div class="input-dropdown">
            <select class="form-select form-select-sm" @bind="selectedCurrencyPay" @bind:event="oninput" @onchange="CalculateReceivedValue">
                @foreach (var coin in AvailableCoins)
                {
                    <option value="@coin.Symbol">@coin.Symbol</option>
                }
            </select>

        </div>
    </div>

    <div class="input-container">
        <div class="input-wrapper">
            <p class="input-label-text">You will receive Roughly</p>
            @* <input class="main-input-field" type="number" value="@youReceiveValue" readonly /> *@
            <p class="main-input-field m-0 p-0">@youReceiveValue.ToString("F2")</p>
        </div>
        <div class="input-dropdown">
            <select class="form-select form-select-sm" @bind="selectedCurrencyReceive" @bind:event="oninput" @onchange="CalculateReceivedValue">
                @foreach (var coin in AvailableCoins)
                {
                    <option value="@coin.Symbol">@coin.Symbol</option>
                }
            </select>

        </div>
    </div>

    <button class="exchange-btn" @onclick="HandleSubmit">EXCHANGE</button>
</div>

<Modal @ref="UserLogRequired" UseStaticBackdrop="true" CloseOnEscape="false" />


@code {
    [Parameter] public EventCallback<ExchangeTransactionDTO> OnTransactionCompleted { get; set; }

    private Modal UserLogRequired = default!;
    private List<CoinType> AvailableCoins = new();
    private string selectedCurrencyPay = "AUD"; 
    private string selectedCurrencyReceive = "INR"; 
    private decimal youPayValue = 0;  
    private decimal youReceiveValue = 0;  
    private ErrorHandleDTO errorDetails = new(); 


    protected override async Task OnInitializedAsync()
    {
        Load.Show(); // Display loading spinner
        try
        {
            AvailableCoins = await CoinTypeService.GetActiveCoinsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            Toast.Notify(new ToastMessage
                {
                    Type = ToastType.Danger,
                    Message = "Unable to load data. Please try again later."
                });
            errorDetails = new ErrorHandleDTO
                {
                    IsError = true,
                    Message = "Unable to load data. Please try again later.",
                    TechnicalMessage = ex.Message
                };
        }
        finally
        {
            Load.Hide(); // Hide loading spinner
        }
    }

    private async Task CalculateReceivedValue()
    {
        Console.WriteLine($"{selectedCurrencyPay} , {selectedCurrencyReceive}");
        Load.Show(); // Display loading spinner

        try
        {

            var baseCurrency = AvailableCoins.FirstOrDefault(c => c.Symbol == selectedCurrencyPay);
            var targetCurrency = AvailableCoins.FirstOrDefault(c => c.Symbol == selectedCurrencyReceive);

            if (baseCurrency == null || targetCurrency == null)
            {
                errorDetails = new ErrorHandleDTO
                    {
                        IsError = true,
                        Message = "Selected currency is invalid. Please check your selection.",
                    };
                return;
            }

            if (baseCurrency == targetCurrency)
            {
                errorDetails = new ErrorHandleDTO
                    {
                        IsError = true,
                        Message = "Selected currency is the same. Please check your selection.",
                    };
                return;
            }

            if (baseCurrency.ExchangeRateToBaseCurrency == null || targetCurrency.ExchangeRateToBaseCurrency == null)
            {
                errorDetails = new ErrorHandleDTO
                    {
                        IsError = true,
                        Message = "Exchange rate data is missing for the selected currency. Please try again later."
                    };
                return;
            }

            if (youPayValue < 1)
            {
                errorDetails = new ErrorHandleDTO
                    {
                        IsError = true,
                        Message = "The entered amount must be greater than 0. Please enter a valid amount to proceed."
                    };
                return;
            }


            // Calculate the exchange rate from PayCurrency to ReceiveCurrency
            var payToUSD = 1 / baseCurrency.ExchangeRateToBaseCurrency.Value; // Convert PayCurrency to USD
            var usdToReceive = targetCurrency.ExchangeRateToBaseCurrency.Value; // Convert USD to ReceiveCurrency
            var payToReceiveRate = payToUSD * usdToReceive; // Combined rate

            // Calculate "You will receive" value
            youReceiveValue = youPayValue * payToReceiveRate;

            // Error Free
            errorDetails = new ErrorHandleDTO { IsError = false };
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            Toast.Notify(new ToastMessage
                {
                    Type = ToastType.Danger,
                    Message = "An error occurred while calculating the exchange value. Please try again."
                });
            errorDetails = new ErrorHandleDTO
                {
                    IsError = true,
                    Message = "An error occurred while calculating the exchange value. Please try again.",
                    TechnicalMessage = ex.Message
                };

        }
        finally
        {
            Load.Hide(); // Hide loading spinner
        }
    }


    private async Task HandleSubmit()
    {

        try
        {
            // Log details to the console

            Console.WriteLine("HandleSubmit Triggered");
            Console.WriteLine($"You Pay: {youPayValue}");
            Console.WriteLine($"Selected Currency for Pay: {selectedCurrencyPay}");
            Console.WriteLine($"Selected Currency for Receive: {selectedCurrencyReceive}");
            Console.WriteLine($"You Will Receive: {youReceiveValue}");
            var userDetails = await LoggedInUserService.GetLoggedInUserAsync();


            if (youPayValue < 1)
            {
                Toast.Notify(new ToastMessage { Type = ToastType.Danger, Message = "The entered amount must be greater than 0. Please enter a valid amount to proceed_" });
                return;
            }
            if (errorDetails.IsError)
            {
                Console.WriteLine("Error during submission: " + errorDetails.Message);
                Toast.Notify(new ToastMessage { Type = ToastType.Danger, Message = errorDetails.Message });
                return;
            }
            if (userDetails == null)
            {
                Console.WriteLine("No user is currently logged in.");
                await UserLogRequired.ShowAsync<ExchangeAccessPageError>(title: "Access Restricted");
                await Task.Delay(5000);
                await UserLogRequired.HideAsync();
                return;
            }
            // Toast.Notify(new ToastMessage
            //     {
            //         Type = ToastType.Success,
            //         Message = "Exchange transaction completed successfully!"
            //     });

            // Create DTO and pass data to the parent
            var transaction = new ExchangeTransactionDTO
                {
                    YouPay = youPayValue,
                    PayCurrency = selectedCurrencyPay,
                    ReceiveCurrency = selectedCurrencyReceive,
                    YouReceive = youReceiveValue,
                    UserId = userDetails.Id ?? string.Empty,
                    IsBuy = true // Defaulting; parent will set based on context
                };

            await OnTransactionCompleted.InvokeAsync(transaction);

            
        }
        catch (Exception ex)
        {
            Console.WriteLine("An error occurred during HandleSubmit:");
            Console.WriteLine(ex);
            Toast.Notify(new ToastMessage
                {
                    Type = ToastType.Danger,
                    Message = "An error occurred while processing your transaction. Please try again."
                });
        }
    }
}

<style>

    .exchangeform-container{
        height: 80%;
        display: flex;
        justify-content: space-evenly;
        flex-direction: column;
    }

    .input-container {
        border-radius: 10px;
        width: 100%;
        border: 1px solid #D4D9E2;
        background-color: white;
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
        padding: 5px 15px 5px 5px;
    }

    .input-label-text{
        padding: 0px;
        margin: 0px 0px 0px 2px;
        font-size: 13px;
        font-weight: 500;
    }

    .input-dropdown{
      min-width: 32px;
    }

    .main-input-field{
        border: none;
        font-size: 16px;
        font-weight: bold;
        color: #000;
        outline: none;
        margin-left: 2px;
        min-width: 190px;
    }

    .exchange-btn {
        border-radius: 24px;
        background-color: #DF0A0A;
        width: 100%;
        padding: 10px 5px;
        font-weight: bolder;
        color: white;
        border: none;
    }
</style>