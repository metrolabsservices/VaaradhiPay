@using VaaradhiPay.DTOs
@using VaaradhiPay.Data
@using VaaradhiPay.Services.Implementations

@inject ExchangeTransactionService ExchangeTransactionService

<div class="container-fluid row justify-content-center">
    <div class="col-4 border border-secondary rounded-3 p-3">
        <h3 class="text-dark mb-0">Payment Information</h3>
        <div class=" px-3 pt-3" style="font-size: 12px">
            <p class="mb-3">Choose an account from the list of existing Accounts to Settle the Amount of Your currency type.</p>
            <p class="fw-bold mb-3">Your Currency Exchange Value lies in :</p>
            <p class="mb-3 fw-bold">BUY - USD <span class="fw-normal">with</span> INR</p>
            <p class="text-muted fw-bold mb-0">NOTE: No Payment is Refunded Check twice before Pay.</p>
        </div>
    </div>
    <div class="col py-2 text-center">
        <div class="vr h-100 mx-2"></div>
    </div>
    <div class="col-7 p-0">
    
            <SortableList TItem="BankAccount" Data="@AccountsData" AllowSorting="false" Context="account" Class="w-100 sortable-container">
                <ItemTemplate>
                    <div class="form-check hstack gap-4">
                        <div>
                            <input class="form-check-input" type="radio" name="flexRadioDefault" id="BankAccountRadioCheck_@account.BankAccountId" @onchange="() => OnAccountSelected(account)">
                        </div>
                        <label class="form-check-label" for="BankAccountRadioCheck_@account.BankAccountId">
                            <p class="mb-0 fw-bold">@account.AccountHolderName</p>
                            <p class="mb-0 text-muted">@account.BankName</p>
                            <p class="mb-0">@account.CurrencyType</p>
                        </label>
                    </div>

                </ItemTemplate>
            </SortableList>

    </div>
</div>

@code {
    [Parameter] public List<BankAccount>? AccountsData { get; set; }
    [Parameter] public EventCallback<bool> OnValidationState { get; set; }
    [Parameter] public string? ReceiveCurrency { get; set; }

    private BankAccount? SelectedBankAccount { get; set; }

    private async Task OnAccountSelected(BankAccount bankAccount)
    {
        SelectedBankAccount = bankAccount;
        // Console.WriteLine($"Selected Bank Account ID: {SelectedBankAccount.BankAccountId}");


        if (SelectedBankAccount.CurrencyType != ReceiveCurrency)
        {
            await EmitValidationState(false);
        }
        else
        {
            var BankData = new SelectedBankDTO
                {
                    BankAccountId = SelectedBankAccount.BankAccountId,
                    BankName = SelectedBankAccount.BankName,
                    AccountHolderName = SelectedBankAccount.AccountHolderName,
                    CurrencyType = SelectedBankAccount.CurrencyType,
                    
                };
            ExchangeTransactionService.SelectedBank = BankData;
        }
    }

    private async Task EmitValidationState(bool isValid)
    {
        await OnValidationState.InvokeAsync(isValid);
    }
}

<style>
    .sortable-container {
        max-height: 270px; 
        overflow-y: scroll; 
        -ms-overflow-style: none; 
        scrollbar-width: none;
    }

        .sortable-container::-webkit-scrollbar {
        display: none;
    }

</style>
